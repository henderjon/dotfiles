# GIT

SCRIPTS / ALIASES
--------------------------------------------------------------------------------

https://git-scm.com/docs/git#Documentation/git.txt---list-cmdsgroupgroup82308203

I couldn't find in documentation, but if you create a script "git-<name>" in $PATH, you can call it with "git name" from within a repo.

SETUP AN INCLUDE
--------------------------------------------------------------------------------

- $ git config --global --replace-all include.path "dotfiles/git/.gitconfig"

FINDING A CONFIG VALUE
--------------------------------------------------------------------------------

To see a config value run:
- $ git config --get diff.colorMoved

To see who/where it is set use:
- $ git config --list --show-origin

GPG
--------------------------------------------------------------------------------

### TROUBLE WITH GPG
# Add GIT_TRACE=1 at the beginning of the command you use. Run the command that failed
$ gpg --list-secret-keys --keyid-format=long
$ git config --global user.signingkey <your key>

### GPG EXPLAINED
show "G" for a good (valid) signature,
"B" for a bad signature,
"U" for a good signature with unknown validity,
"X" for a good signature that has expired,
"Y" for a good signature made by an expired key,
"R" for a good signature made by a revoked key,
"E" if the signature cannot be checked (e.g. missing key) and
"N" for no signature

# sign/off the last commit
$ git commit --amend --signoff

# sign/off a range of commits
$ git rebase --signoff HEAD~2

PRETTY STATUS
--------------------------------------------------------------------------------

- https://git-scm.com/docs/git-status

Specifically: `$ git status --branch --porcelain=v2`

REVERT
--------------------------------------------------------------------------------

### To revert stuff committed by accident ###
$ git revert --no-commit D
$ git revert --no-commit C
$ git revert --no-commit B
$ git commit -m \"the commit message for all of them\"

### or
$ git revert --no-commit HEAD~3..

### or the same
$ git revert --no-commit HEAD~3..HEAD

REBASE / RESTORE
--------------------------------------------------------------------------------

### reword commit messages
$ git rebase -i $startFrom

### reword ALL commit messages
$ git rebase -i --root

### delete remote
$ git push --delete origin tagname
$ git push --delete origin branchname

###  checkout that revision over the top of local files ###
$ git checkout -f A -- .
$ git commit -a

### Checkout a file from a rev
$ git checkout rev:path/to/file

### Show a file from a rev
$ git show rev -- path/to/file

RANGE
--------------------------------------------------------------------------------

### Traversing revs
# ~ is the first parent ~3 is the first parent's first parent's first parent
# ^n is the nth parent ^3 is the third parent
# ~~~ == ^^^ == ^1^1^1
# ^3^2 is the second parent of the third parent of the given rev

### view range; show all commits in $NEW that are absent in $OLD
$ git log $OLD..$NEW

### view range; show all commits that only in EITHER $NEW or $OLD (commits they do NOT have in common)
### "--left-right" might be useful
$ git log $OLD...$NEW

### view range; show diff in $NEW since branching from $OLD
$ git diff $OLD...$NEW

### CLI CODE REVIEW
$ git diff $dev $release
$ git diff --name-status $dev $release

BRANCHING
--------------------------------------------------------------------------------

### started work from the wrong branch ###
$ git fetch && git rebase --onto <where> <where I am now>

LOG
--------------------------------------------------------------------------------

### view specific folder/file history
$ git log -- path/to/folder

### include deletes:
$ git log -- path/to/folder/*

### shows diff patch
$ git log -p -- path/to/folder/*

### Search commit messages
$ git log --all --notes -i --grep=''

### or the same ... `g` searches the reflog
$ git log --g -i --grep=''

### show commits in $LATER that are NOT in $EARLIER
$ git log $EARLIER..$LATER

### List all commits that touched a file
$ git log --follow -- filename

SEARCHING
--------------------------------------------------------------------------------

### Search source code ###
$ git grep -i \$str $(git rev-list --all)

### or the same ... `g` searches the reflog
$ git grep -i \$regex $(git rev-list --all)

### or search a folder within the repo; also if too many files error
$ git grep -i \$regex $(git rev-list --all -- sub/tree) -- sub/tree

### push a subtree as a new repo
$ git subtree --prefix $dir push $remote $dest_branch

### apply a branches changes on the current branch
$ git checkout $branch && git checkout $otherBranch -- .
